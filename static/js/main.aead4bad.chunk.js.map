{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","AboutText","role","placeholder","onClick","togglemode1","style","height","width","cursor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","alert3","toLowerCase","words","split","i","length","substring","words1","join","copyText","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","newtext1","Alert","alert","word","lower","charAt","slice","Capitalize","msg","defaultProps","App","mode1","setmode1","_useState3","_useState4","alert1","setalert1","alert2","message","setTimeout","togglemode","cls","console","log","body","classList","remove","add","setInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.aead4bad.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar  navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n    <div className=\"container-fluid \">\r\n      <a className=\"navbar-brand \" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active \" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link \" href=\"/about\">{props.AboutText}</a>\r\n          </li>\r\n        </ul>\r\n        <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success \" type=\"submit\">Search</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div className=\"d-flex\">\r\n    <div className=\"bg-primary rounded mx-2\" onClick={()=>props.togglemode1('primary')} style={{height: \"30px\", width: \"30px\", cursor:\"pointer\"}}></div> \r\n    <div className=\"bg-danger rounded mx-2\" onClick={()=>props.togglemode1('danger')} style={{height: \"30px\", width: \"30px\", cursor:\"pointer\"}}></div>\r\n    <div className=\"bg-success rounded mx-2\" onClick={()=>props.togglemode1('success')} style={{height: \"30px\", width: \"30px\", cursor:\"pointer\"}}></div>\r\n    <div className=\"bg-warning rounded mx-2\" onClick={()=>props.togglemode1('warning')} style={{height: \"30px\", width: \"30px\", cursor:\"pointer\"}}></div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.propTypes={title: PropTypes.string.isRequired,\r\n                    AboutText: PropTypes.string}\r\n\r\nNavbar.defaultProps = {title: \"Set title here\",\r\n                      AboutText: \"About text here\"}\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= () => {\r\n        //console.log(\"Upper case was clicked\")\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.alert3(\"Converted to Uppercase\",\"success\")\r\n    }\r\n\r\n    const handleLoClick= ()=>\r\n    {\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.alert3(\"Converted to Lowercase\",\"success\")\r\n    }\r\n    const handlecapitalizeClick= ()=>\r\n    {\r\n        let words=text.split(' ')\r\n        for (let i=0; i<words.length; i++)\r\n        {\r\n            words[i]=words[i][0].toUpperCase()+words[i].substring(1)\r\n        }\r\n        let words1=words.join(' ')\r\n        setText(words1)\r\n        props.alert3(\"Converted to capital case\",\"success\")\r\n\r\n    }\r\n    const handleCopy=()=>\r\n    {\r\n        // Get the text field\r\n        var copyText = document.getElementById(\"mybox\");\r\n\r\n        // Select the text field\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999); // For mobile devices\r\n\r\n        // Copy the text inside the text field\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.alert3(\"Text is copied\",\"success\")\r\n    }\r\n    const HandleExtraSpace=()=>\r\n    {\r\n        \r\n        let newtext=text.split(/[ ]+/)\r\n        let newtext1=newtext.join(\" \");\r\n        setText(newtext1)\r\n        props.alert3(\"Extra space deleted\",\"success\")\r\n    }\r\n\r\n    const handleclearClick=() => {\r\n        let newtext=\"\"\r\n        setText(newtext)\r\n        props.alert3(\"Text is cleared\",\"success\")\r\n    }\r\n    const handleOnChange= (event) => {\r\n        //console.log(\"On change\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const[text, setText]=useState(\"\");\r\n    \r\n    return (\r\n        <>\r\n    <div className='container'style={{color: props.mode==='light'?\"black\":\"white\"}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.togglemode1,color: props.mode==='light'?\"black\":\"white\"}} id=\"mybox\" rows=\"8\"></textarea>\r\n        </div>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Convert to uppercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handlecapitalizeClick}>Convert to capitalize</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>Clear text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={HandleExtraSpace}>Remove unncessary space</button>\r\n    <div className=\"container my-3\" style={{color: props.mode==='light'?\"black\":\"white\"}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} minutes</p>\r\n        <p>{text.split(\" \").length-1} spaces</p>\r\n        <h2>Preview</h2>\r\n        <pre>{text.length>0?text:\"Enter something in the textbox above to it preview here\"}</pre>\r\n    </div> \r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalize=(word)=>\r\n    {\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1)\r\n    }\r\n  return (\r\n    props.alert && <div>\r\n         <div className={`alert alert-${props.alert.type} alert-dismissible  show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\n//import About from './components/About';\n//import { BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\n\nfunction App() {\n  const [mode1, setmode1] = useState(\"light\")\n  const [alert1, setalert1] = useState(null)\n  const alert2=(message, type) => {\n    setalert1({\n      msg : message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert1(null)\n    }, 1500);\n  }\n  const removebodyclasses = () => \n  {\n    document.body.classList.remove('bg-dark')\n    document.body.classList.remove('bg-light')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-danger')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-primary')\n  }\n  const togglemode=(cls)=>\n  {\n    console.log(cls)\n    removebodyclasses();\n    document.body.classList.add(\"bg-\"+cls)\n    if(mode1===\"light\")\n    {\n      setmode1(\"dark\");\n      document.body.style.backgroundColor=\"#003a7e\";\n      alert2(\"Dark mode has been enabled\",\"success\");\n      document.title=\"Dark Mode - Enabled \"\n      setInterval(() => {\n        document.title=\"Textutils is an amazing mode \"\n      }, 1500);\n      setInterval(() => {\n        document.title=\"Install Textutils Now\"\n      }, 2000);\n    }\n    else\n    {\n      setmode1(\"light\")\n      document.body.style.backgroundColor=\"white\";\n      alert2(\"Light mode has been enabled\",\"success\");\n      document.title=\"Light Mode - Enabled \"\n    }\n  }\n  return (\n    <>\n    {/*<Router>*/}\n      <Navbar title=\"TextUtils\" AboutText=\"About TextUtils\" mode={mode1} togglemode1={togglemode}/>\n      <Alert alert={alert1}/>\n      <div className=\"container my-3\">\n      <TextForm heading=\"Enter the text to analyze below\" mode={mode1} alert3={alert2} togglemode1={togglemode}/>\n      {/*<Routes>\n        {<Route exact path=\"/about\" element={<About/>}/>}\n        {<Route exact path=\"/\" element={<TextForm heading=\"Enter the text to analyze below\" mode={mode1} alert3={alert2} togglemode1={togglemode}/>}/>}\n      </Routes>\n      </div>\n    </Router>*/}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}